***********************************************************************************************************************************
File Opened Done ...
File :  #version 330 core
in vec3 in_position;
in vec3 in_normal;
in vec2 in_texcoord;

varying vec3 N;

varying vec4 V; 

//out vec2 UV;
//inout vec4 C;

uniform mat4 MV;
uniform mat4 P;

uniform uint lights_count;

uniform float t;

void main(void)
{
	vec4 position = vec4(in_position.x  ,in_position.y,in_position.z,1.0);
	mat3 NM = mat3(transpose(inverse(MV)));
	V = MV * position ;
	uint i;

	N = normalize(NM * in_normal);
	gl_Position =  P * MV *  position;
}



File Opened Done ...
File :  #version 330 core
const uint MAX_LIGHT_COUNT = 100u;

varying vec3 N;
varying vec4 V; 
varying vec3 L[MAX_LIGHT_COUNT];
//in vec2 UV;


uniform vec4 lights_ambient[MAX_LIGHT_COUNT];
uniform vec4 lights_diffuse[MAX_LIGHT_COUNT];
uniform vec4 lights_specular[MAX_LIGHT_COUNT];
uniform vec4 lights_position[MAX_LIGHT_COUNT];
uniform vec4 lights_misc[MAX_LIGHT_COUNT];

uniform uint lights_count;

uniform vec4 material_ambient;
uniform vec4 material_diffuse;
uniform vec4 material_specular;
uniform float material_shininess;

layout(location = 0) out vec4 color;

void main(void)
{
	vec3 E = normalize(-V).xyz;
	vec3 R;
	vec3 L;
	vec3 vTol;
	float vtollength;
	float range;
	float attenuation;
	float attenuationFactor;
	color = vec4(0.,0.,0.,0.);
	vec4 ambient = vec4(0.,0.,0.,0.);
	vec4 diffuse = vec4(0.,0.,0.,0.);
	vec4 specular = vec4(0.,0.,0.,0.);
	 
	for(uint i = 0u; i < lights_count;i++)
	{
		vTol = (lights_position[i] - V).xyz;
		vtollength = length(vTol);
		range = lights_misc[i].x;
		if(range == 0. || vtollength < range)
		{
			attenuation = lights_misc[i].y;
			attenuationFactor = 1.;
			if(attenuation < 1. && range != 0.)
			{
				attenuationFactor = ((range - vtollength) / ((1-attenuation) * range));
			}
			clamp(attenuationFactor,0.0,1.0);
			L = normalize(vTol).xyz;
			R = normalize(-reflect(L.xyz,N));
			ambient += material_ambient * lights_ambient[i] * attenuationFactor;
			diffuse += dot(L,N) * material_diffuse * lights_diffuse[i] * attenuationFactor;
			diffuse = clamp(diffuse,0.0,1.0);
			specular += pow(max(0.0,dot(R,E)),0.3*material_shininess) * material_specular*lights_specular[i]*attenuationFactor;
			specular += clamp(specular,0.0,1.0);
		}
	}

	color = vec4((diffuse + ambient + specular).xyz,material_diffuse.a);
}


File Opened Done ...
File :  #version 330 core
const uint MAX_LIGHT_COUNT = 100u;

varying vec4 V; 
varying vec3 N;

//in vec2 UV;
//uniform sampler2D envmap;

uniform vec4 lights_ambient[MAX_LIGHT_COUNT];
uniform vec4 lights_diffuse[MAX_LIGHT_COUNT];
uniform vec4 lights_specular[MAX_LIGHT_COUNT];
uniform vec4 lights_position[MAX_LIGHT_COUNT];
uniform vec4 lights_misc[MAX_LIGHT_COUNT];
uniform uint lights_count;

uniform vec4 material_ambient;
uniform vec4 material_diffuse;
uniform vec4 material_specular;
uniform float material_shininess;

uniform float width;
uniform float height;

out vec4 color;
uniform sampler2D depthTex;

void main(){
	vec3 E = normalize(-V).xyz;
	vec3 R;
	vec3 L;
	vec3 vTol;
	float vtollength;
	float range;
	float attenuation;
	float attenuationFactor;
	color = vec4(0.,0.,0.,0.);
	vec4 ambient = vec4(0.,0.,0.,0.);
	vec4 diffuse = vec4(0.,0.,0.,0.);
	vec4 specular = vec4(0.,0.,0.,0.);
	 
	for(uint i = 0u; i < lights_count;i++)
	{
		vTol = (lights_position[i] - V).xyz;
		vtollength = length(vTol);
		range = lights_misc[i].x;
		if(range == 0. || vtollength < range)
		{
			attenuation = lights_misc[i].y;
			attenuationFactor = 1.;
			if(attenuation < 1. && range != 0.)
			{
				attenuationFactor = ((range - vtollength) / ((1-attenuation) * range));
			}
			clamp(attenuationFactor,0.0,1.0);
			L = normalize(vTol).xyz;
			R = normalize(-reflect(L.xyz,N));
			ambient += material_ambient * lights_ambient[i] * attenuationFactor;
			diffuse += dot(L,N) * material_diffuse * lights_diffuse[i] * attenuationFactor;
			diffuse = clamp(diffuse,0.0,1.0);
			specular += pow(max(0.0,dot(R,E)),0.3*material_shininess) * material_specular*lights_specular[i]*attenuationFactor;
			specular += clamp(specular,0.0,1.0);
		}
	}


	float textureZ = texture(depthTex,vec2(clamp(gl_FragCoord.x / width,0.0,1.0),clamp(gl_FragCoord.y / height,0.0,1.0))).x;
	
	if(textureZ < gl_FragCoord.z) 
	{
		color = vec4((diffuse + ambient + specular).xyz,material_diffuse.a);
	}else
	{
		discard;
	}
}
	

26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
28
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
20
3
19
18
17
2
16
1
0
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
28
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
26
25
24
23
22
21
20
19
18
17
16
15
14
28
13
27
26
12
25
24
23
11
10
9
8
7
22
19
6
21
20
18
19
18
5
17
17
16
16
4
21
3
15
15
14
2
13
20
14
12
19
18
13
12
1
17
0
11
10
16
15
14
11
13
10
9
8
23
12
11
9
10
22
7
6
9
8
8
21
5
7
20
4
19
7
6
18
17
3
16
15
2
1
0
5
6
5
4
4
14
3
3
2
2
13
19
18
17
1
12
16
0
15
11
10
1
0
14
9
26
8
7
6
25
24
13
12
5
23
4
3
11
2
22
21
10
20
1
0
19
9
18
17
8
16
15
14
7
6
5
13
12
4
3
2
11
10
1
9
28
0
27
8
26
25
7
6
5
4
24
3
2
23
22
21
20
1
19
18
0
17
16
15
14
13
12
11
10
9
8
7
6
5
25
24
4
3
23
2
22
1
0
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
21
20
19
18
17
16
15
14
25
24
13
23
22
12
11
10
21
20
9
19
8
7
6
18
17
16
5
15
14
4
13
12
11
10
3
9
2
1
20
0
8
7
25
19
6
5
24
18
23
17
4
22
16
21
3
15
2
1
0
21
20
20
19
18
14
19
17
16
15
14
13
13
12
12
11
18
10
9
17
11
10
9
8
16
7
8
15
14
7
6
13
12
11
5
10
4
9
6
5
3
2
8
7
4
1
0
3
6
5
2
4
1
3
0
2
1
0
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
25
10
24
9
23
22
8
7
6
25
24
5
4
21
20
3
19
23
2
18
17
16
22
15
14
13
1
21
12
11
20
26
10
19
25
24
0
9
18
23
8
7
17
16
15
14
6
13
5
4
12
22
21
20
11
3
10
2
9
1
8
19
18
17
16
0
7
28
6
15
5
4
27
26
14
13
3
2
12
25
24
1
11
10
0
9
8
23
7
22
6
21
20
19
18
17
16
5
4
3
15
2
1
14
0
13
12
11
10
9
8
7
6
5
4
3
2
1
0
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
23
22
21
7
20
19
6
18
17
5
4
3
2
16
15
1
0
14
22
21
20
19
13
12
18
17
16
11
10
9
15
8
7
14
13
6
5
4
3
2
12
1
11
0
10
9
8
7
6
5
4
3
2
1
0
24
23
22
21
20
19
18
17
16
15
27
14
26
25
13
12
24
23
11
27
22
10
21
9
20
19
26
25
18
8
24
7
23
6
17
22
5
16
4
3
21
20
19
18
2
17
15
28
27
26
14
25
24
16
23
13
15
1
12
22
0
14
11
10
21
13
9
20
12
11
8
19
10
9
18
17
8
7
6
5
7
6
5
4
16
3
4
3
2
15
2
1
1
0
14
13
0
12
11
10
9
8
7
6
5
4
3
2
1
0
20
19
18
23
17
22
21
16
20
19
15
14
13
18
12
17
16
15
14
11
10
13
9
28
8
27
26
7
6
12
25
24
23
11
22
5
21
4
10
20
3
9
28
27
8
19
26
18
25
7
24
2
1
6
5
0
17
4
3
23
2
1
22
16
15
21
20
19
18
0
14
13
12
17
11
10
16
15
9
14
13
12
8
7
6
11
5
10
4
3
9
2
1
8
7
6
5
0
4
3
2
1
0
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
21
20
19
18
17
16
15
14
13
19
12
11
10
9
18
8
7
6
5
4
17
3
16
15
14
13
12
11
10
9
8
2
22
7
6
21
1
5
0
20
19
4
3
18
17
16
15
2
1
14
0
13
12
11
10
9
8
7
6
5
4
3
2
1
0
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
25
24
23
22
21
22
21
20
19
18
20
17
16
15
14
13
19
12
18
17
11
16
10
15
14
9
13
12
11
10
8
7
9
6
8
5
4
7
6
3
5
4
3
21
2
1
2
0
1
0
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
28
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
28
27
26
25
24
23
1
0
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
62.4125
