***********************************************************************************************************************************
File Opened Done ...
File :  #version 330 core
in vec3 in_position;
in vec3 in_normal;
in vec2 in_texcoord;

varying vec3 N;

varying vec4 V; 

//out vec2 UV;
//inout vec4 C;

uniform mat4 MV;
uniform mat4 P;

uniform uint lights_count;

uniform float t;

void main(void)
{
	vec4 position = vec4(in_position.x  ,in_position.y,in_position.z,1.0);
	mat3 NM = mat3(transpose(inverse(MV)));
	V = MV * position ;
	uint i;

	N = normalize(NM * in_normal);
	gl_Position =  P * MV *  position;
}



File Opened Done ...
File :  #version 330 core
const uint MAX_LIGHT_COUNT = 100u;

varying vec3 N;
varying vec4 V; 
varying vec3 L[MAX_LIGHT_COUNT];
//in vec2 UV;


uniform vec4 lights_ambient[MAX_LIGHT_COUNT];
uniform vec4 lights_diffuse[MAX_LIGHT_COUNT];
uniform vec4 lights_specular[MAX_LIGHT_COUNT];
uniform vec4 lights_position[MAX_LIGHT_COUNT];
uniform vec4 lights_misc[MAX_LIGHT_COUNT];

uniform uint lights_count;

uniform vec4 material_ambient;
uniform vec4 material_diffuse;
uniform vec4 material_specular;
uniform float material_shininess;

layout(location = 0) out vec4 color;

void main(void)
{
	vec3 E = normalize(-V).xyz;
	vec3 R;
	vec3 L;
	vec3 vTol;
	float vtollength;
	float range;
	float attenuation;
	float attenuationFactor;
	color = vec4(0.,0.,0.,0.);
	vec4 ambient = vec4(0.,0.,0.,0.);
	vec4 diffuse = vec4(0.,0.,0.,0.);
	vec4 specular = vec4(0.,0.,0.,0.);
	 
	for(uint i = 0u; i < lights_count;i++)
	{
		vTol = (lights_position[i] - V).xyz;
		vtollength = length(vTol);
		range = lights_misc[i].x;
		if(range == 0. || vtollength < range)
		{
			attenuation = lights_misc[i].y;
			attenuationFactor = 1.;
			if(attenuation < 1. && range != 0.)
			{
				attenuationFactor = ((range - vtollength) / ((1-attenuation) * range));
			}
			clamp(attenuationFactor,0.0,1.0);
			L = normalize(vTol).xyz;
			R = normalize(-reflect(L.xyz,N));
			ambient += material_ambient * lights_ambient[i] * attenuationFactor;
			diffuse += dot(L,N) * material_diffuse * lights_diffuse[i] * attenuationFactor;
			diffuse = clamp(diffuse,0.0,1.0);
			specular += pow(max(0.0,dot(R,E)),0.3*material_shininess) * material_specular*lights_specular[i]*attenuationFactor;
			specular += clamp(specular,0.0,1.0);
		}
	}

	color = vec4((diffuse + ambient + specular).xyz,material_diffuse.a);
}


File Opened Done ...
File :  #version 330 core
const uint MAX_LIGHT_COUNT = 100u;

varying vec4 V; 
varying vec3 N;

//in vec2 UV;
//uniform sampler2D envmap;

uniform vec4 lights_ambient[MAX_LIGHT_COUNT];
uniform vec4 lights_diffuse[MAX_LIGHT_COUNT];
uniform vec4 lights_specular[MAX_LIGHT_COUNT];
uniform vec4 lights_position[MAX_LIGHT_COUNT];
uniform vec4 lights_misc[MAX_LIGHT_COUNT];
uniform uint lights_count;

uniform vec4 material_ambient;
uniform vec4 material_diffuse;
uniform vec4 material_specular;
uniform float material_shininess;

uniform float width;
uniform float height;

out vec4 color;
uniform sampler2D depthTex;

void main(){
	vec3 E = normalize(-V).xyz;
	vec3 R;
	vec3 L;
	vec3 vTol;
	float vtollength;
	float range;
	float attenuation;
	float attenuationFactor;
	color = vec4(0.,0.,0.,0.);
	vec4 ambient = vec4(0.,0.,0.,0.);
	vec4 diffuse = vec4(0.,0.,0.,0.);
	vec4 specular = vec4(0.,0.,0.,0.);
	 
	for(uint i = 0u; i < lights_count;i++)
	{
		vTol = (lights_position[i] - V).xyz;
		vtollength = length(vTol);
		range = lights_misc[i].x;
		if(range == 0. || vtollength < range)
		{
			attenuation = lights_misc[i].y;
			attenuationFactor = 1.;
			if(attenuation < 1. && range != 0.)
			{
				attenuationFactor = ((range - vtollength) / ((1-attenuation) * range));
			}
			clamp(attenuationFactor,0.0,1.0);
			L = normalize(vTol).xyz;
			R = normalize(-reflect(L.xyz,N));
			ambient += material_ambient * lights_ambient[i] * attenuationFactor;
			diffuse += dot(L,N) * material_diffuse * lights_diffuse[i] * attenuationFactor;
			diffuse = clamp(diffuse,0.0,1.0);
			specular += pow(max(0.0,dot(R,E)),0.3*material_shininess) * material_specular*lights_specular[i]*attenuationFactor;
			specular += clamp(specular,0.0,1.0);
		}
	}


	float textureZ = texture(depthTex,vec2(clamp(gl_FragCoord.x / width,0.0,1.0),clamp(gl_FragCoord.y / height,0.0,1.0))).x;
	
	if(textureZ < gl_FragCoord.z) 
	{
		color = vec4((diffuse + ambient + specular).xyz,material_diffuse.a);
	}else
	{
		discard;
	}
}
	

26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
28
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
19
18
17
16
15
14
13
12
11
25
24
23
10
22
21
20
19
9
18
17
8
7
16
15
14
13
6
5
12
11
4
10
3
2
9
1
0
8
7
6
5
4
3
2
1
0
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
24
5
4
23
22
23
22
21
3
2
21
20
19
20
19
18
18
17
17
16
15
19
18
1
14
17
16
16
0
13
12
15
15
11
14
13
10
9
12
11
10
14
8
13
12
9
11
8
10
7
9
8
7
6
5
6
7
5
4
3
2
4
6
3
2
1
5
1
0
0
4
26
27
3
25
26
24
23
25
24
23
22
2
22
21
1
20
19
18
21
20
17
19
16
0
18
15
17
16
15
14
28
27
14
26
25
24
13
23
22
13
12
21
11
20
19
10
9
18
12
11
10
9
8
17
8
16
7
7
15
6
14
5
6
13
19
18
12
17
5
4
4
3
2
3
2
1
1
11
16
26
0
10
9
0
25
24
23
22
21
8
15
14
20
13
12
7
6
19
18
5
11
17
4
16
15
3
14
2
1
13
10
12
11
10
0
9
9
8
7
8
6
5
7
4
6
5
4
3
2
1
3
2
0
1
0
20
19
18
17
16
15
14
13
12
11
10
27
9
26
28
27
8
7
25
26
24
6
5
25
4
3
24
2
23
1
0
22
21
20
19
18
17
23
16
24
23
22
22
21
21
20
15
14
13
12
20
19
19
18
17
18
11
17
16
15
14
13
12
11
10
10
9
16
8
15
9
14
8
7
13
12
7
6
6
5
4
3
2
1
5
0
4
3
2
1
0
11
10
9
8
7
28
27
6
5
26
25
4
3
2
1
0
24
23
19
22
21
20
24
19
18
23
18
17
22
16
15
21
14
17
20
13
16
15
14
12
13
19
11
12
18
10
9
8
7
11
6
17
10
9
16
5
15
14
8
4
7
13
12
3
6
11
2
10
5
1
4
9
0
3
8
22
2
1
7
0
6
21
20
5
19
4
18
3
2
17
16
1
0
15
14
13
26
12
11
25
10
9
24
23
22
21
8
20
7
19
18
17
6
20
19
18
16
5
28
4
27
26
25
24
17
3
15
16
2
15
1
14
13
14
23
22
12
11
0
21
20
10
13
12
11
19
10
9
18
9
17
16
15
8
14
13
8
12
7
6
5
7
11
10
6
4
5
3
9
8
7
4
3
2
2
1
1
0
0
6
19
5
4
3
2
1
0
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
19
18
17
16
15
27
14
13
12
11
26
25
10
9
8
7
24
6
5
4
23
22
21
3
2
20
1
0
19
18
24
17
16
23
15
14
13
22
12
21
11
20
10
9
8
19
18
7
17
16
6
5
4
3
2
15
1
0
14
13
12
11
10
9
8
7
6
5
4
3
2
1
27
24
0
25
26
23
24
25
22
23
21
20
22
24
21
23
20
19
18
17
22
16
21
15
19
18
20
14
19
13
18
17
17
16
16
15
15
14
14
13
12
12
11
10
9
8
7
13
12
11
10
6
11
9
8
5
7
6
5
4
10
4
9
3
8
7
6
3
2
5
2
4
1
3
2
1
1
0
0
0
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
25
24
23
22
21
20
19
18
20
19
17
18
16
17
16
15
15
14
14
13
13
12
11
12
10
9
11
8
7
23
6
22
5
21
10
20
19
4
9
8
18
17
7
16
6
15
5
14
13
3
4
2
1
3
2
1
0
12
0
11
10
9
8
7
6
5
4
3
2
1
0
21
20
19
18
17
16
15
14
13
12
11
10
23
22
21
20
9
19
8
18
17
7
6
5
4
3
2
16
15
1
14
13
0
12
11
10
9
8
7
6
5
4
26
25
24
23
22
3
2
21
20
1
19
18
17
16
15
27
14
26
0
25
24
13
12
23
11
22
10
21
9
20
19
18
17
8
16
15
14
7
13
12
6
11
10
5
4
9
3
2
8
7
1
0
6
5
4
25
3
24
23
2
1
0
22
26
21
25
24
20
19
23
22
18
17
21
20
16
19
18
15
14
17
13
12
16
11
10
15
14
9
13
8
7
12
6
5
4
11
3
10
2
9
1
8
7
0
6
5
4
3
2
1
0
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
23
7
6
5
22
4
3
21
20
19
18
2
17
16
15
14
13
26
1
0
12
25
24
11
23
10
9
8
7
22
21
6
20
5
4
19
18
17
16
3
15
14
13
2
12
1
0
11
10
9
8
7
6
5
4
3
2
25
1
0
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
20
24
23
19
18
22
17
21
21
20
16
19
20
19
18
15
18
17
14
13
16
17
16
15
15
14
13
12
11
10
9
14
8
7
13
6
12
12
11
11
10
10
5
9
4
3
2
8
9
8
1
0
7
6
5
27
4
26
3
25
25
2
7
24
6
1
5
4
24
23
0
23
22
22
21
3
20
2
1
0
21
19
20
18
17
19
18
16
17
15
16
14
13
15
12
11
14
13
12
10
9
8
7
11
6
5
10
4
9
3
8
7
2
6
5
4
1
3
2
0
1
0
28
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
26
10
25
24
23
22
9
21
20
19
18
8
17
7
6
5
4
3
16
2
1
15
0
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
62.4475
