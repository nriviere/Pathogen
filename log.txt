File Opened Done ...
File :  #version 330 core
in vec3 in_position;
in vec3 in_normal;
in vec2 in_texcoord;

varying vec3 N;

varying vec4 V; 

//out vec2 UV;
//inout vec4 C;

uniform mat4 MV;
uniform mat4 P;

uniform uint lights_count;

uniform float t;

void main(void)
{
	vec4 position = vec4(in_position.x  ,in_position.y,in_position.z,1.0);
	mat3 NM = mat3(transpose(inverse(MV)));
	V = MV * position ;
	uint i;

	N = normalize(NM * in_normal);
	gl_Position =  P * MV *  position;
}



File Opened Done ...
File :  #version 330 core
const uint MAX_LIGHT_COUNT = 100u;

varying vec3 N;
varying vec4 V; 
varying vec3 L[MAX_LIGHT_COUNT];
//in vec2 UV;


uniform vec4 lights_ambient[MAX_LIGHT_COUNT];
uniform vec4 lights_diffuse[MAX_LIGHT_COUNT];
uniform vec4 lights_specular[MAX_LIGHT_COUNT];
uniform vec4 lights_position[MAX_LIGHT_COUNT];
uniform vec4 lights_misc[MAX_LIGHT_COUNT];

uniform uint lights_count;

uniform vec4 material_ambient;
uniform vec4 material_diffuse;
uniform vec4 material_specular;
uniform float material_shininess;

layout(location = 0) out vec4 color;

void main(void)
{
	vec3 E = normalize(-V).xyz;
	vec3 R;
	vec3 L;
	vec3 vTol;
	float vtollength;
	float range;
	float attenuation;
	float attenuationFactor;
	color = vec4(0.,0.,0.,0.);
	vec4 ambient = vec4(0.,0.,0.,0.);
	vec4 diffuse = vec4(0.,0.,0.,0.);
	vec4 specular = vec4(0.,0.,0.,0.);
	 
	for(uint i = 0u; i < lights_count;i++)
	{
		vTol = (lights_position[i] - V).xyz;
		vtollength = length(vTol);
		range = lights_misc[i].x;
		if(range == 0. || vtollength < range)
		{
			attenuation = lights_misc[i].y;
			attenuationFactor = 1.;
			if(attenuation < 1. && range != 0.)
			{
				attenuationFactor = ((range - vtollength) / ((1-attenuation) * range));
			}
			clamp(attenuationFactor,0.0,1.0);
			L = normalize(vTol).xyz;
			R = normalize(-reflect(L.xyz,N));
			ambient += material_ambient * lights_ambient[i] * attenuationFactor;
			diffuse += dot(L,N) * material_diffuse * lights_diffuse[i] * attenuationFactor;
			diffuse = clamp(diffuse,0.0,1.0);
			specular += pow(max(0.0,dot(R,E)),0.3*material_shininess) * material_specular*lights_specular[i]*attenuationFactor;
			specular += clamp(specular,0.0,1.0);
		}
	}

	color = vec4((diffuse + ambient + specular).xyz,material_diffuse.a);
}


File Opened Done ...
File :  #version 330 core
const uint MAX_LIGHT_COUNT = 100u;

varying vec4 V; 
varying vec3 N;

//in vec2 UV;
//uniform sampler2D envmap;

uniform vec4 lights_ambient[MAX_LIGHT_COUNT];
uniform vec4 lights_diffuse[MAX_LIGHT_COUNT];
uniform vec4 lights_specular[MAX_LIGHT_COUNT];
uniform vec4 lights_position[MAX_LIGHT_COUNT];
uniform vec4 lights_misc[MAX_LIGHT_COUNT];
uniform uint lights_count;

uniform vec4 material_ambient;
uniform vec4 material_diffuse;
uniform vec4 material_specular;
uniform float material_shininess;

uniform float width;
uniform float height;

out vec4 color;
uniform sampler2D depthTex;

void main(){
	vec3 E = normalize(-V).xyz;
	vec3 R;
	vec3 L;
	vec3 vTol;
	float vtollength;
	float range;
	float attenuation;
	float attenuationFactor;
	color = vec4(0.,0.,0.,0.);
	vec4 ambient = vec4(0.,0.,0.,0.);
	vec4 diffuse = vec4(0.,0.,0.,0.);
	vec4 specular = vec4(0.,0.,0.,0.);
	 
	for(uint i = 0u; i < lights_count;i++)
	{
		vTol = (lights_position[i] - V).xyz;
		vtollength = length(vTol);
		range = lights_misc[i].x;
		if(range == 0. || vtollength < range)
		{
			attenuation = lights_misc[i].y;
			attenuationFactor = 1.;
			if(attenuation < 1. && range != 0.)
			{
				attenuationFactor = ((range - vtollength) / ((1-attenuation) * range));
			}
			clamp(attenuationFactor,0.0,1.0);
			L = normalize(vTol).xyz;
			R = normalize(-reflect(L.xyz,N));
			ambient += material_ambient * lights_ambient[i] * attenuationFactor;
			diffuse += dot(L,N) * material_diffuse * lights_diffuse[i] * attenuationFactor;
			diffuse = clamp(diffuse,0.0,1.0);
			specular += pow(max(0.0,dot(R,E)),0.3*material_shininess) * material_specular*lights_specular[i]*attenuationFactor;
			specular += clamp(specular,0.0,1.0);
		}
	}


	float textureZ = texture(depthTex,vec2(clamp(gl_FragCoord.x / width,0.0,1.0),clamp(gl_FragCoord.y / height,0.0,1.0))).x;
	
	if(textureZ < gl_FragCoord.z) 
	{
		color = vec4((diffuse + ambient + specular).xyz,material_diffuse.a);
	}else
	{
		discard;
	}
}
	

***********************************************************************************************************************************
23
22
21
20
19
18
17
16
15
14
13
24
12
23
11
10
22
21
20
19
9
8
7
18
17
16
15
14
6
5
4
13
12
3
2
11
10
9
1
0
23
8
7
22
21
20
6
19
5
18
17
4
16
15
3
14
2
13
12
1
0
11
10
9
8
7
6
5
4
3
2
1
0
27
26
25
24
23
22
21
20
19
18
17
21
16
20
15
19
14
18
17
16
13
12
11
15
10
9
14
8
13
12
7
6
5
4
3
11
2
10
1
0
9
8
7
6
23
24
23
22
21
20
22
19
18
17
26
16
25
24
23
27
15
21
26
14
20
25
22
24
23
22
13
19
21
21
20
12
20
19
19
18
11
18
17
10
18
16
17
15
16
15
9
14
14
17
13
13
12
16
11
12
10
8
9
7
8
11
7
15
6
14
6
5
13
5
4
10
12
4
9
26
3
28
3
27
11
8
26
2
2
7
25
1
0
6
5
25
10
9
8
24
7
4
23
6
5
4
3
1
3
22
0
24
23
21
2
2
1
22
21
20
19
1
0
20
19
18
17
18
0
17
16
15
14
13
16
12
15
11
10
14
9
8
13
12
11
7
10
25
24
23
22
21
20
19
18
17
16
15
14
19
18
17
13
16
15
14
12
11
10
9
8
22
7
21
6
5
4
3
13
20
19
18
17
2
12
16
15
1
11
14
10
0
13
12
11
9
10
8
7
6
9
8
5
7
4
3
6
2
5
1
0
4
3
24
2
1
0
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
22
2
21
1
20
19
0
18
17
16
23
15
14
13
22
12
21
20
19
11
18
10
9
17
8
7
6
16
15
14
13
12
11
10
9
8
7
5
4
3
2
1
6
0
5
4
3
2
1
0
27
26
25
24
23
22
21
20
19
18
17
16
23
15
14
22
21
13
12
11
10
20
19
9
8
7
6
5
18
17
4
16
3
15
14
2
13
12
11
1
0
10
9
8
7
6
24
5
23
4
3
22
21
2
20
1
0
19
18
17
16
15
14
22
21
13
20
19
12
18
17
16
15
11
14
13
10
9
8
12
11
10
7
9
8
6
5
4
3
7
6
2
1
0
5
4
3
2
1
0
25
24
23
22
21
20
19
18
17
16
15
14
13
12
22
11
10
21
20
9
19
18
8
17
16
7
6
5
15
14
4
3
13
2
1
0
12
11
10
9
8
7
6
5
4
3
2
1
25
0
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
22
9
8
21
7
6
5
20
19
24
19
23
18
22
17
16
21
20
19
15
18
14
13
17
16
12
15
14
13
12
11
11
10
9
8
7
10
9
6
8
5
7
6
5
4
3
2
4
3
2
1
1
0
0
23
19
22
21
18
20
17
19
18
16
15
14
17
13
12
11
16
15
14
10
9
13
12
11
8
10
9
8
7
7
6
5
4
6
5
3
4
3
2
1
2
1
0
0
23
22
21
20
28
20
19
18
19
27
17
16
26
25
18
24
15
23
14
13
17
22
12
16
21
20
19
18
17
11
15
14
10
16
9
8
15
13
12
14
13
12
11
10
11
7
10
9
23
8
22
26
6
25
9
21
5
4
20
8
7
24
7
19
3
6
5
18
23
2
22
21
20
1
17
0
16
19
18
17
4
6
5
3
4
3
2
2
15
1
16
1
0
0
14
13
12
15
11
14
10
9
13
8
12
11
10
7
6
9
8
5
7
6
5
4
3
4
3
2
2
1
1
0
0
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
20
26
19
18
25
24
23
22
21
20
17
19
18
16
15
17
16
14
15
13
14
13
12
11
12
11
10
10
9
9
8
8
7
6
7
6
5
5
20
4
4
19
3
2
1
0
3
2
1
18
0
17
21
20
20
19
19
18
16
15
14
18
17
13
16
15
17
12
11
16
15
14
13
14
12
11
13
12
10
10
11
10
9
8
9
9
8
7
8
7
6
7
6
5
6
5
5
4
4
3
4
3
2
3
2
1
2
0
1
0
1
0
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
28
27
22
26
25
24
21
23
22
20
21
19
18
20
19
18
17
16
17
15
16
14
13
12
15
11
14
13
21
12
11
10
10
20
19
18
9
9
8
17
7
8
7
16
15
14
6
6
13
5
5
4
4
12
3
3
11
2
2
1
0
1
0
10
9
8
7
6
5
4
3
2
1
0
28
27
26
26
25
25
24
24
23
23
22
21
20
22
21
19
18
20
26
20
19
17
16
19
25
18
17
15
18
24
23
22
17
16
21
20
16
15
14
19
15
13
12
11
18
10
14
17
16
14
15
9
14
13
8
12
13
11
7
12
13
6
12
11
10
9
11
10
8
10
9
7
5
8
9
6
7
5
4
4
6
3
2
8
7
3
2
1
0
5
1
4
6
0
5
4
3
3
2
2
1
1
0
0
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
25
2
1
0
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
19
6
18
5
4
17
3
16
15
2
1
0
14
13
12
11
10
9
8
7
6
26
5
4
3
2
25
24
23
1
22
0
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
22
5
4
3
21
20
2
19
18
17
1
16
15
0
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
24
23
6
22
5
21
20
19
4
3
2
1
0
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
59.7634
