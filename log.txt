***********************************************************************************************************************************
File Opened Done ...
File :  #version 330 core
in vec3 in_position;
in vec3 in_normal;
in vec2 in_texcoord;

varying vec3 N;

varying vec4 V; 

//out vec2 UV;
//inout vec4 C;

uniform mat4 MV;
uniform mat4 P;

uniform uint lights_count;

uniform float t;

void main(void)
{
	vec4 position = vec4(in_position.x  ,in_position.y,in_position.z,1.0);
	mat3 NM = mat3(transpose(inverse(MV)));
	V = MV * position ;
	uint i;

	N = normalize(NM * in_normal);
	gl_Position =  P * MV *  position;
}



File Opened Done ...
File :  #version 330 core
const uint MAX_LIGHT_COUNT = 100u;

varying vec3 N;
varying vec4 V; 
varying vec3 L[MAX_LIGHT_COUNT];
//in vec2 UV;


uniform vec4 lights_ambient[MAX_LIGHT_COUNT];
uniform vec4 lights_diffuse[MAX_LIGHT_COUNT];
uniform vec4 lights_specular[MAX_LIGHT_COUNT];
uniform vec4 lights_position[MAX_LIGHT_COUNT];
uniform vec4 lights_misc[MAX_LIGHT_COUNT];

uniform uint lights_count;

uniform vec4 material_ambient;
uniform vec4 material_diffuse;
uniform vec4 material_specular;
uniform float material_shininess;

layout(location = 0) out vec4 color;

void main(void)
{
	vec3 E = normalize(-V).xyz;
	vec3 R;
	vec3 L;
	vec3 vTol;
	float vtollength;
	float range;
	float attenuation;
	float attenuationFactor;
	color = vec4(0.,0.,0.,0.);
	vec4 ambient = vec4(0.,0.,0.,0.);
	vec4 diffuse = vec4(0.,0.,0.,0.);
	vec4 specular = vec4(0.,0.,0.,0.);
	 
	for(uint i = 0u; i < lights_count;i++)
	{
		vTol = (lights_position[i] - V).xyz;
		vtollength = length(vTol);
		range = lights_misc[i].x;
		if(range == 0. || vtollength < range)
		{
			attenuation = lights_misc[i].y;
			attenuationFactor = 1.;
			if(attenuation < 1. && range != 0.)
			{
				attenuationFactor = ((range - vtollength) / ((1-attenuation) * range));
			}
			clamp(attenuationFactor,0.0,1.0);
			L = normalize(vTol).xyz;
			R = normalize(-reflect(L.xyz,N));
			ambient += material_ambient * lights_ambient[i] * attenuationFactor;
			diffuse += dot(L,N) * material_diffuse * lights_diffuse[i] * attenuationFactor;
			diffuse = clamp(diffuse,0.0,1.0);
			specular += pow(max(0.0,dot(R,E)),0.3*material_shininess) * material_specular*lights_specular[i]*attenuationFactor;
			specular += clamp(specular,0.0,1.0);
		}
	}

	color = vec4((diffuse + ambient + specular).xyz,material_diffuse.a);
}


File Opened Done ...
File :  #version 330 core
const uint MAX_LIGHT_COUNT = 100u;

varying vec4 V; 
varying vec3 N;

//in vec2 UV;
//uniform sampler2D envmap;

uniform vec4 lights_ambient[MAX_LIGHT_COUNT];
uniform vec4 lights_diffuse[MAX_LIGHT_COUNT];
uniform vec4 lights_specular[MAX_LIGHT_COUNT];
uniform vec4 lights_position[MAX_LIGHT_COUNT];
uniform vec4 lights_misc[MAX_LIGHT_COUNT];
uniform uint lights_count;

uniform vec4 material_ambient;
uniform vec4 material_diffuse;
uniform vec4 material_specular;
uniform float material_shininess;

uniform float width;
uniform float height;

out vec4 color;
uniform sampler2D depthTex;

void main(){
	vec3 E = normalize(-V).xyz;
	vec3 R;
	vec3 L;
	vec3 vTol;
	float vtollength;
	float range;
	float attenuation;
	float attenuationFactor;
	color = vec4(0.,0.,0.,0.);
	vec4 ambient = vec4(0.,0.,0.,0.);
	vec4 diffuse = vec4(0.,0.,0.,0.);
	vec4 specular = vec4(0.,0.,0.,0.);
	 
	for(uint i = 0u; i < lights_count;i++)
	{
		vTol = (lights_position[i] - V).xyz;
		vtollength = length(vTol);
		range = lights_misc[i].x;
		if(range == 0. || vtollength < range)
		{
			attenuation = lights_misc[i].y;
			attenuationFactor = 1.;
			if(attenuation < 1. && range != 0.)
			{
				attenuationFactor = ((range - vtollength) / ((1-attenuation) * range));
			}
			clamp(attenuationFactor,0.0,1.0);
			L = normalize(vTol).xyz;
			R = normalize(-reflect(L.xyz,N));
			ambient += material_ambient * lights_ambient[i] * attenuationFactor;
			diffuse += dot(L,N) * material_diffuse * lights_diffuse[i] * attenuationFactor;
			diffuse = clamp(diffuse,0.0,1.0);
			specular += pow(max(0.0,dot(R,E)),0.3*material_shininess) * material_specular*lights_specular[i]*attenuationFactor;
			specular += clamp(specular,0.0,1.0);
		}
	}


	float textureZ = texture(depthTex,vec2(clamp(gl_FragCoord.x / width,0.0,1.0),clamp(gl_FragCoord.y / height,0.0,1.0))).x;
	
	if(textureZ < gl_FragCoord.z) 
	{
		color = vec4((diffuse + ambient + specular).xyz,material_diffuse.a);
	}else
	{
		discard;
	}
}
	

26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
21
20
19
18
17
16
15
14
13
12
11
10
9
8
26
25
7
24
6
23
5
4
22
3
21
2
20
1
19
0
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
19
18
17
16
28
27
26
24
25
24
15
23
22
23
14
21
13
20
22
21
12
19
20
18
19
11
17
16
18
17
10
16
15
14
13
9
8
15
14
12
13
11
19
10
18
12
11
10
9
17
8
9
8
7
7
6
5
6
5
16
7
6
15
4
14
13
4
3
12
2
1
0
3
5
2
11
10
1
4
9
3
2
1
0
8
0
7
6
5
4
3
2
1
0
19
23
22
21
20
18
17
16
19
15
18
17
19
16
15
14
18
13
17
14
12
11
16
10
13
12
9
15
11
8
7
6
5
10
9
14
8
13
12
7
4
6
27
11
10
5
9
3
8
7
4
6
26
3
25
2
24
23
1
2
22
21
5
20
0
1
19
4
18
17
16
15
0
14
3
2
13
12
11
1
10
24
0
9
23
25
8
24
22
21
7
6
20
19
23
5
27
18
19
17
26
4
18
22
17
21
20
3
2
19
16
1
18
16
25
24
0
15
17
23
14
16
22
13
15
21
12
14
13
11
15
20
19
10
18
9
14
8
7
12
13
6
12
11
10
17
5
9
16
8
15
14
13
12
11
4
11
10
3
7
10
9
8
9
2
7
6
5
1
6
0
4
5
4
8
7
6
3
5
3
4
2
2
1
0
1
25
0
3
24
2
1
0
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
23
22
21
28
27
20
19
18
26
17
16
15
25
14
13
12
11
24
23
10
9
8
22
7
21
6
20
5
19
4
3
2
18
17
16
15
14
13
1
12
11
0
10
9
8
7
6
5
4
3
2
1
0
27
26
25
24
23
22
21
20
19
21
20
18
17
16
15
19
14
18
17
13
12
16
15
11
19
14
13
12
10
18
11
10
9
8
7
17
16
6
5
9
15
4
14
3
2
1
8
7
0
6
13
12
11
5
4
10
3
2
1
9
0
8
7
6
5
4
3
2
1
0
22
21
20
19
18
17
16
15
14
13
12
11
10
24
9
8
7
23
22
21
6
20
25
24
23
5
22
21
20
19
18
17
4
3
16
15
14
2
13
12
11
1
0
10
28
27
26
9
8
28
19
18
25
27
17
24
26
23
16
15
22
21
14
25
13
12
7
20
6
24
11
5
23
19
10
18
22
21
17
4
16
3
9
15
2
20
8
19
14
13
7
6
12
11
5
10
4
18
9
1
0
17
3
8
7
16
15
14
2
1
13
12
6
11
10
0
9
5
8
7
4
3
6
5
2
4
1
0
3
2
1
0
27
26
25
24
23
22
21
20
19
24
18
23
22
17
16
15
14
21
13
12
11
20
19
10
9
18
8
7
17
16
6
5
15
4
3
2
14
23
1
13
12
11
22
0
21
10
24
20
9
23
19
8
22
7
18
6
21
17
16
5
20
4
19
18
15
14
3
13
19
2
12
18
17
17
1
16
11
0
15
14
16
10
9
13
8
15
7
6
5
12
11
14
10
9
8
4
3
2
13
1
0
12
7
6
11
5
4
10
3
2
9
1
8
7
19
0
6
18
5
4
3
17
16
25
24
15
14
2
13
1
0
23
12
11
10
22
21
20
9
8
7
19
18
21
6
17
20
5
16
15
14
25
24
13
4
3
23
19
18
2
22
21
17
20
19
12
11
1
0
10
18
17
9
8
7
6
5
4
16
15
16
14
13
3
12
2
1
0
11
10
15
9
14
13
8
12
7
6
5
4
11
3
10
9
2
1
0
8
7
6
5
4
3
2
1
0
22
21
20
19
18
28
27
17
26
19
25
16
18
17
23
16
22
15
14
24
21
28
13
23
22
20
21
12
15
20
19
19
18
18
17
14
17
27
16
11
26
13
25
10
12
11
16
15
14
15
24
10
13
23
9
8
9
12
11
7
8
10
6
9
14
22
21
25
8
5
4
7
13
20
3
6
5
4
19
3
2
12
18
24
1
2
17
7
6
5
1
0
11
16
10
15
0
14
9
23
22
4
8
7
21
3
6
20
2
19
18
5
13
12
1
17
0
11
4
3
10
2
9
1
8
7
0
25
6
24
5
16
15
23
22
4
3
2
1
21
0
14
13
12
11
10
9
8
20
7
19
6
5
4
18
3
17
16
15
2
14
1
0
13
12
11
10
9
8
7
6
5
4
3
2
1
0
26
25
24
28
27
23
22
26
25
24
21
20
23
19
22
18
21
17
16
15
14
13
20
12
11
19
18
10
9
17
16
15
14
13
8
12
11
10
7
6
9
8
5
4
7
6
3
2
5
4
3
2
1
0
1
0
19
18
17
16
15
14
13
12
11
10
9
28
27
26
25
8
7
24
23
6
22
5
4
21
20
3
19
2
18
17
16
19
15
1
0
14
13
18
17
12
11
16
10
9
15
8
7
6
14
5
13
4
3
2
1
12
11
10
9
0
8
7
6
5
4
3
2
1
0
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
28
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0
62.2027
